# -*- coding: utf-8 -*-
"""Estudos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ak9QCF09BVUbYOmf6NEU1JyLQSiJDYNY
"""

pip install faker sqlalchemy

from sqlalchemy import create_engine
from sqlalchemy.orm import declarative_base
from sqlalchemy import Column, Integer, String, DateTime
from datetime import datetime
from sqlalchemy.orm import Session, sessionmaker, scoped_session
from faker import Faker
from uuid import uuid4
import random

!pwd

fake = Faker('pt_BR')  # criando gerador de dados falsos

engine = create_engine("sqlite:///foo.db", echo=False)  # conectando ao banco de dados
Base = declarative_base()  # declarando as estruturas, cria as tabelas dentro da classe

class Pessoas(Base):
    __tablename__ = "pessoas"

    id = Column(Integer, primary_key=True, autoincrement=True)
    name = Column(String)
    email = Column(String)
    birth = Column(DateTime)
    job = Column(String)

class Pessoas2(Base):
    __tablename__ = "pessoas2"

    id = Column(Integer, primary_key=True, autoincrement=True)
    name = Column(String,index=True)  # index para deixar as consultas mais rapidas
    email = Column(String, index=True, unique=True)  # unique para ter um unico e-mail
    birth = Column(DateTime)
    job = Column(String)

Pessoas.__table__.drop(engine, checkfirst = True)

Pessoas2.__table__.drop(engine, checkfirst = True)

Base.metadata.create_all(engine)

Session = sessionmaker(bind=engine)  # criando uma sessao para manipular os dados(exemplo: select, insert e update)
session = Session()

"""## Comparando tempo de execução da tabela pessoas1(sem o uso do index) da tabela pessoas2(com o uso do index)###

**1. Inserindo 9999 registros na tabela Pessoas:**
"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# # inserindo registros no banco
# # cronometrando usando o comando time     
# for i in range(9999):  # inserindo 9999 registros
#   insert_fake = Pessoas(name = fake.name(), email = f"{uuid4()}{fake.free_email()}", birth = fake.date_of_birth(), job = fake.job())
#   session.add(insert_fake)
#   session.commit()

result = session.query(Pessoas).count()  # count para confirmar a quantidade de registros
result

# instanciando registros
julio_user = Pessoas(name="Julio", email="julio01@gmail.com", birth=datetime.fromisoformat('1995-01-15'), job = "vendedor")  # fromisoformat: padrão internacional de data e hora
session.add(julio_user)

# Commented out IPython magic to ensure Python compatibility.
# # cronometrando usando o comando timeit, para ver o tempo medio da execucao
# %%timeit
# session.query(Pessoas).filter_by(name="Julio").all()

"""**2. Inserindo 9999 registros na tabela Pessoas2:**"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# for i in range(9999):
#   insert_fake = Pessoas2(name = fake.name(), email = f"{uuid4()}{fake.free_email()}", birth = fake.date_of_birth(), job = fake.job())
#   session.add(insert_fake)
#   session.commit()

julio_user2 = Pessoas2(name="Julio", email="julio01@gmail.com", birth=datetime.fromisoformat('1995-01-15'), job = "vendedor")
session.add(julio_user2)

# Commented out IPython magic to ensure Python compatibility.
# %%timeit
# session.query(Pessoas2).filter_by(name="Julio").all()

"""**3. Inserindo 5999 registros na tabela Pessoas:**"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# for i in range(5999):
#   insert_fake = Pessoas(name = fake.name(), email = f"{uuid4()}{fake.free_email()}", birth = fake.date_of_birth(), job = fake.job())
#   session.add(insert_fake)
#   session.commit()

julio_user = Pessoas(name="Julio", email="julio01@gmail.com", birth=datetime.fromisoformat('1995-01-15'), job = "vendedor")
session.add(julio_user)

# Commented out IPython magic to ensure Python compatibility.
# %%timeit
# session.query(Pessoas).filter_by(name="Julio").all()

"""**4. Inserindo 5999 registros na tabela Pessoas2**"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# for i in range(5999):
#   insert_fake = Pessoas2(name = fake.name(), email = f"{uuid4()}{fake.free_email()}", birth = fake.date_of_birth(), job = fake.job())
#   session.add(insert_fake)
#   session.commit()

julio_user2 = Pessoas2(name="Julio", email="julio01@gmail.com", birth=datetime.fromisoformat('1995-01-15'), job = "vendedor")
session.add(julio_user2)

# Commented out IPython magic to ensure Python compatibility.
# %%timeit
# session.query(Pessoas2).filter_by(name="Julio").all()

"""## **Conclusão**

### Com a inserção dos 5999 registros, o tempo de inserção da tabela Pessoas(sem o index) foi de 1.34 ms para 2.6 ms. Enquanto o tempo de inserção da tabela Pessoas2(com o uso do index) foi de 404 µs para 420 µs.

### Concluindo que quando temos a coluna indexada e fazemos pesquisa por ela, o tempo é praticamente constante

**Visualizando registros:**
"""

for (name,email,birth,job) in session.query(Pessoas.name,Pessoas.email,Pessoas.birth,Pessoas.job).limit(10):
  print(name,email,birth,job)